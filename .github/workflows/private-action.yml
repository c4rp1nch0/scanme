on: 
  push:
    branches:
      - 'stable' 
  pull_request:
    types: ["opened", "edited", "reopened", "synchronize"]
    branches:
      - 'stable'

jobs:
  test-private-action:
    runs-on: ubuntu-latest
    name: A job to say hello
    steps:

      - name: Checkout this repo 
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Checkout private action
        uses: actions/checkout@v3
        with:
          repository: c4rp1nch0/security-actions
          token: ${{ secrets.GH_SECURITY_TOKEN }}
          path: .github/security-actions

      - name: Cat event.json
        run: cat $GITHUB_EVENT_PATH

      - name: get base sha with jq
        shell: bash
        run: |
          /bin/echo "::group:: Getting the SHAs"
          
          /bin/echo "Trigger event: $GITHUB_EVENT_NAME" 
          
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then 
              BASE_SHA="$(/usr/bin/jq -r '.pull_request.base.sha' < "$GITHUB_EVENT_PATH" | /bin/grep -Po "[a-f0-9]{40}")"
              HEAD_SHA="$(echo $GITHUB_SHA | /bin/grep -Po "[a-f0-9]{40}")" 
          else 
              BASE_SHA="$(/usr/bin/jq -r '.before' < "$GITHUB_EVENT_PATH" | /bin/grep -Po "[a-f0-9]{40}")"
              HEAD_SHA="$(/usr/bin/jq -r '.after' < "$GITHUB_EVENT_PATH" | /bin/grep -Po "[a-f0-9]{40}")"
          fi
          
          [ -z "$BASE_SHA" ] \
              && /bin/echo "::error:: Couldn't get the BASE SHA." && exit 1
          
          [ -z "$HEAD_SHA" ] \
              && /bin/echo "::error:: Couldn't get the HEAD SHA." && exit 1
          
          /bin/echo "BASE SHA: $BASE_SHA"
          /bin/echo "HEAD SHA: $HEAD_SHA"
          
          /bin/echo "::endgroup::"
          
          
          /bin/echo "::group:: Changing working directory..."
          
          pushd "$GITHUB_WORKSPACE" || \
              (/bin/echo "::error:: Couldn't change the working directory to '$GITHUB_WORKSPACE'" && exit 1)
          WORKSPACE_PATH="$(/usr/bin/readlink -fn "$INPUT_PATH")"
          popd 
          
          [ ! -d "$WORKSPACE_PATH" ] && \
              (/bin/echo "::error:: Couldn't resolve the working directory '$WORKSPACE_PATH'" && exit 1 )
          
          pushd "$WORKSPACE_PATH" || \
              (/bin/echo "::error:: change the working directory to '$WORKSPACE_PATH'" && exit 1)
          
          /bin/echo "::endgroup::"
          
          /bin/echo "::group:: Getting tinted files" 
          
          TINTED_FILES="$(/usr/bin/git diff --name-only $BASE_SHA $HEAD_SHA)"
          
          [ -z "$TINTED_FILES" || "$?" -ne 0 ] \
              && /bin/echo "::error:: Couldn't get the tinted files." && exit 1
          
          /bin/echo "Tinted files:"
          /bin/echo "$TINTED_FILES[@]"
          
          /bin/echo "::endgroup::" 



      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v22.1

      - name: List all changed files
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
            #      - name: Get changed files 
            #        run: |
            #          cat $GITHUB_EVENT_PATH
            #          if [ ${{ github.event_name }} == 'push' ]; then
            #              echo 1
            #              git diff --name-only ${{ github.event.before }}  
            #
            #          else
            #              git diff --name-only ${{ github.base_ref }} ${{ github.head_ref}}
            #              
            #          fi


            #      - name: Login to Docker Hub
            #        uses: docker/login-action@v1
            #        with:
            #          username: ${{ secrets.DOCKER_HUB_USERNAME }}
            #          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            #
            #      - name: Run private action 
            #        uses: ./.github/security-actions/eslint-reviewdog
            #        with:
            #          eslint-config-name: 'default.json'
            #          eslint-flags: '--no-color --no-error-on-unmatched-pattern --no-inline-config' 
            #          reviewdog-filter-mode: added
